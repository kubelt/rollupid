/*
 * NFT Storage API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Meta {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<Vec<u8>>,
    
}


// #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
// pub struct Store {pub use self::nft::Nft;
//     /// Self-describing content-addressed identifiers for distributed systems. Check [spec](https://github.com/multiformats/cid) for more info.
//     #[serde(rename = "cid", skip_serializing_if = "Option::is_none")]
//     pub cid: Option<String>,
//     /// Size in bytes of the NFT data.
//     #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
//     pub size: Option<f32>,
//     /// This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: YYYY-MM-DDTHH:MM:SSZ.
//     #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
//     pub created: Option<String>,
//     /// MIME type of the upload file or 'directory' when uploading multiple files.
//     #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
//     pub _type: Option<Type>,
//     /// Name of the JWT token used to create this NFT.
//     #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
//     pub scope: Option<String>,
//     #[serde(rename = "pin", skip_serializing_if = "Option::is_none")]
//     pub pin: Option<Box<crate::models::Pin>>,
//     /// Files in the directory (only if this NFT is a directory).
//     #[serde(rename = "files", skip_serializing_if = "Option::is_none")]
//     pub files: Option<Vec<serde_json::Value>>,
//     #[serde(rename = "deals", skip_serializing_if = "Option::is_none")]
//     pub deals: Option<Vec<crate::models::Deal>>,
// }

impl Meta {
    pub fn new() -> Meta {
        Meta {
            name: None,
            description: None,
            properties: None,
            _type: None,
            file: None,
        }
    }
}

/// MIME type of the upload file or 'directory' when uploading multiple files.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "directory")]
    Directory,
    #[serde(rename = "image/jpeg")]
    ImageJpeg,
    #[serde(rename = "application/json")]
    ApplicationJson,
    #[serde(rename = "other mime types")]
    OtherMimeTypes,
}

