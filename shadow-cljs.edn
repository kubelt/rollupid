;; sdk/shadow-cljs.edn

{;; starbase dev configs
 :nrepl {:port 8777}

 ;; Use the dependencies provided in deps.edn. The listed :aliases are
 ;; activated when collecting dependencies which fact we use to specify
 ;; CLJS-specific deps under the :cljs alias.
 ;;
 ;; NB: :source-paths must be provided in deps.edn when using that file
 ;; to specify dependencies. If specified here they will be ignored.
 ;;
 ;; NB: we depend on the shadow-cljs provided version of core.async;
 ;; adding an explicit dependency on same causes a warning to be
 ;; generated and the pinned version support by shadow-cljs to replace
 ;; it in any case.
 :deps {:aliases [:cljs :starbase]}

 ;;:nrepl {:init-ns user.shared}

 ;; Configuration for development-time HTTP server.
 :dev-http {8021 "web/web-test"
            8280 "starbase/resources/public"
            8290 "starbase/resources/public/js/test"}

 ;; Built-in targets include:
 ;; :browser
 ;; :node-library
 ;; :node-script

 ;; To compile a development build:
 ;; $ npx shadow-cljs compile sdk|cli|web
 ;;
 ;; To compile a release build:
 ;; $ npx shadow-cljs release sdk|cli|web

 ;; It is possible to use shadow-cljs to invoke Clojure code, either to
 ;; run a standalone command or potentially as part of a build (TBD). To
 ;; invoke an example Clojure command:
 ;;   $ npm run cmd:example
 ;; This runs:
 ;;   $ npx shadow-cljs run build.command/example
 ;; Available options:
 ;; * -o / --out-file :: output file name ["target/example.txt"]

 ;; This build target generates a test file but doesn't run it:
 ;; $ npx shadow-cljs compile/release test
 ;;
 ;; When :autorun is set this is performed automatically:
 ;; $ node target/sdk-test.js
 ;;
 ;; The default test entrypoint, provided by shadow-cljs, executes
 ;; cljs.test tests. If you want to use another testing framework
 ;; you'll need to specify a new entrypoint by setting :main.

 ;; NB: extra per-target reader conditionals are a shadow-cljs *only*
 ;; feature.

 :builds
 {;; STARBASE (Kubelt React App)
  ;; ---------------------------------------------------------------------------

  :starbase
  {:target     :browser
   :output-dir "starbase/resources/public/js/compiled"
   :asset-path "/js/compiled"
   :modules
   {:app {:init-fn dapp.core/init}}
   :devtools
   ;; enable re-frame-10x
   {:preloads [day8.re-frame-10x.preload]}
   :dev
   {:compiler-options
    {:reader-features #{:browser}}
     ;; enable event tracing for re-frame
     :closure-defines {re-frame.trace.trace-enabled?        true
                       day8.re-frame.tracing.trace-enabled? true}}}

  :starbase-test
  {:target :browser-test
   :ns-regexp "starbase\\..*-test$"
   :test-dir "starbase/resources/public/js/test"
   :dev
   {:compiler-options
    {:reader-features #{:browser}}}}

  :starbase-ci
  {:target :karma
   :ns-regexp "starbase\\..*-test$"
   :output-to "starbase/target/karma-test.js"
   :dev
   {:compiler-options
    {:reader-features #{:browser}}}}

  ;; SDK (Node.js)
  ;; ---------------------------------------------------------------------------
  ;; This is the core Node.js library that provides the Kubelt SDK,
  ;; compiled for use with Node.js.

  ;; TODO rename to :sdk-node?
  :sdk
  {:target :node-library
   ;; Each keyword in the :exports map is available in the generated
   ;; library with that name.
   :exports {:v1 com.kubelt.sdk/node-v1}
   :compiler-options {;; :none :simple :advanced
                      :optimizations :advanced
                      :reader-features #{:node}
                      :infer-externs :true
                      :output-feature-set :es-next}
   :output-to "packages/sdk-js/lib/sdk.js"}

  ;; SDK (npm + webpack)
  ;; ---------------------------------------------------------------------------
  ;; Builds an npm-compatible version of the SDK using a :browser
  ;; conditional build. The output is run through webpack to generate
  ;; the version of the SDK used in our web tooling, e.g. browser
  ;; plugins.

  :sdk-web
  {:target :npm-module
   :entries [com.kubelt.sdk]
   :compiler-options {:optimizations :advanced
                      :infer-externs :true
                      :output-feature-set :es6
                      :reader-features #{:browser}}
   :output-dir "packages/sdk-web/lib"}

  ;; SDK tests
  ;; ---------------------------------------------------------------------------

  :sdk-test
  {:target :node-test
   :compiler-options {:reader-features #{:node}}
   :output-to "target/sdk-test.js"
   :ns-regexp "(lib|sdk|com\\.kubelt\\.(rpc|spec))\\..*-test$"
   :autorun false}

  ;; Generate an HTML version of the SDK tests that can be manually checked by:
  ;; $ cd target/web-test/ && npx http-server
  ;; $ chromium http://localhost:8081/
  :web-test
  {:target :browser-test
   :test-dir "target/web-test"
   :ns-regexp "(lib|sdk|web)\\..*-test$"
   :compiler-options {:reader-features #{:browser}}}

  ;; Generate a version of the test suite suitable for execution as part
  ;; of a build pipeline:
  ;; $ npx shadow-cljs compile web-ci
  ;; $ CHROME_BIN=... npx karma start --single-run
  :web-ci
  {:target :karma
   :output-to "target/web-ci.js"
   :ns-regexp "(lib|sdk|web)\\..*-test$"
   :compiler-options {:reader-features #{:browser}}}

  ;; Kubelt Debug CLI
  ;; ---------------------------------------------------------------------------
  ;; This is a development CLI used to run various commands for testing,
  ;; preparing data, or performing other non-customer-facing operations.

  :ddt
  {:target :node-script
   :main com.kubelt.ddt/main
   :compiler-options {:optimizations :simple
                      :infer-externs :true
                      :reader-features #{:node}
                      :output-feature-set :es-next}
   :output-to "packages/ddt/lib/ddt.js"}

  ;; Kubelt CLI
  ;; ---------------------------------------------------------------------------

  :kbt
  {:target :node-script
   :main com.kubelt.kbt/main
   :compiler-options {:optimizations :simple
                      :infer-externs :auto
                      :reader-features #{:node}
                      :output-feature-set :es-next}
   :output-to "packages/kbt/lib/kbt.js"}

  :kbt-test
  {:target :node-test
   :output-to "target/kbt-test.js"
   :ns-regexp "-test$"
   :compiler-options {:reader-features #{:node}}
   :autorun true}

  ;; IPFS Client
  ;; ---------------------------------------------------------------------------

  :ipfs
  {:target :node-library
   :exports {:v0 com.kubelt.ipfs/node-v0}
   :compiler-options {:optimizations :advanced
                      :infer-externs :true
                      :output-feature-set :es-next}
   :output-to "packages/ipfs-js/lib/ipfs.js"}

  :ipfs-test
  {:target :node-test
   :output-to "target/ipfs-test.js"
   :ns-regexp "ipfs\\..*-test$"
   :autorun true}}}
