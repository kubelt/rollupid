;; bb.edn
{:min-bb "0.8.0"
 :tasks
 {:requires
  [[babashka.classpath :as cp]
   [babashka.fs :as fs]
   [babashka.process :as bpr]
   [clojure.edn :as edn]
   [clojure.java.io :as io]
   [clojure.set :as cs]
   [clojure.string :as str]]
  :init
  (do
    ;; Add shared build code to classpath.
    (cp/add-classpath "./bb")
    (require '[com.kubelt.cli :as cli])
    (require '[com.kubelt.edn :as kb.edn])
    (require '[com.kubelt.dot-env :as dot-env])
    (require '[com.kubelt.package :as package])
    (require '[com.kubelt.semver :as semver])
    (require '[com.kubelt.shadow :as shadow])
    (require '[com.kubelt.time :as time])
    ;; Extract version from package.json.
    (def version (cli/release-version "package.json" *command-line-args*))

    ;; FILES

    ;; The path of local-only configuration file containing various
    ;; build configuration values.
    (def deploy-edn (str (fs/path "3iD" "deploy.edn")))
    ;; Secrets used by act (local GitHub Actions workflow runner).
    (def act-secrets "act.secrets"))

  ;; Development
  ;; ---------------------------------------------------------------------------

  semver:parse
  (let [version-map (semver/parse version)]
    (println (semver/to-str version-map)))

  package:version
  {:doc "Print out the package.json version"
   :task (println version)}

  package:options
  {:doc "Print out the CLI options."
   :task (prn (cli/parse-options *command-line-args*))}

  timestamp:iso-date
  {:doc "Print out the date in ISO format"
   :task (println (time/iso-date))}

  cmd:example
  {:doc "Invoke Clojure build script via shadow-cljs."
   :task (shell "npx shadow-cljs run build.command/example")},

  -deploy:edn
  {:doc "A map of values read from deployment configuration file"
   :task (if (fs/regular-file? deploy-edn)
           (kb.edn/read deploy-edn)
           {})}

  -act:secrets
  {:doc "Generate a secret-containing env-file for use with act"
   :depends [-deploy:edn]
   :task (let [{admin-account-id :admin/account-id
                cloudflare-api-token :cloudflare/token
                datadog-token :datadog/token
                next-kv-app-id :next/kv-app-id
                next-url :next/url
                current-kv-app-id :current/kv-app-id
                current-url :current/url} -deploy:edn
               secrets {:admin-account-id admin-account-id
                        :cloudflare-api-token cloudflare-api-token
                        :datadog-token datadog-token
                        :next-kv-app-id next-kv-app-id
                        :next-url next-url
                        :current-kv-app-id current-kv-app-id
                        :current-url current-url}]
           (dot-env/write act-secrets secrets))}

  -act:next:3iD
  {:doc "Run GitHub Actions 'next' pipeline, '3iD' job locally"
   :depends [-act:secrets]
   :task (shell "act --insecure-secrets -W .github/workflows/next.yaml -j 3iD")}

  ;; Tasks
  ;; ---------------------------------------------------------------------------

  ;; TODO generate Apache Maven .m2/settings.xml include GitHub package
  ;; repository setup. User will have to specify their username and
  ;; personal access token and put the file into the right spot.

  ;; TODO generate $HOME/.npmrc configuration

  lint:init
  {:doc "Initialize the linter"
   :task (do
           ;; Create the .clj-kondo directory if it doesn't exist.
           (let [kondo-dir ".clj-kondo"]
             (if-not (fs/directory? kondo-dir)
               (fs/create-dir kondo-dir)))
           ;; Pre-populate linter directory with analysis results.
           (let [args ["-M:lint" "--parallel" "--dependencies" "--copy-configs" "--lint" "src/"]
                 command (str/join " " args)]
             (clojure command)))}

  lint:dev
  {:doc "Lint development source code"
   :task (let [dir "src/dev"]
           (clojure (str/join " " ["-M:lint" "--parallel" "--lint" dir])))}

  lint:main
  {:doc "Lint application source code"
   :task (let [dir "src/main"]
           (clojure (str/join " " ["-M:lint" "--parallel" "--lint" dir])))}

  lint:test
  {:doc "Lint test source code"
   :task (let [dir "src/test"]
           (clojure (str/join " " ["-M:lint" "--parallel" "--lint" dir])))}

  lint:all
  {:doc "Lint all source code"
   :task (let [dir "src/"]
           (clojure (str/join " " ["-M:lint" "--parallel" "--lint" dir])))}

  build:ddt:develop
  {:doc "Build development version of ddt command line application"
   :task (shell "npx shadow-cljs compile ddt")}

  build:ddt:release
  {:doc "Build release version of ddt command line application"
   :task (shell "npx shadow-cljs release ddt")}

  build:kbt:develop
  {:doc "Build development version of kbt command line application"
   :task (shell "npx shadow-cljs compile kbt")}

  build:kbt:release
  {:doc "Build release version of kbt command line application"
   :task (shell "npx shadow-cljs release kbt")}

  build:sdk:develop
  {:doc "Build development version of the sdk for node"
   :task (shell "npx shadow-cljs compile sdk")}

  build:sdk-test:develop
  {:doc "Build development version of the sdk-test for node"
   :task (shell "npx shadow-cljs compile sdk-test")}

  build:sdk:watch
  {:doc "Watch and rebuild when changed development version of the sdk for node"
   :task (shell "npx shadow-cljs watch sdk")}

  build:sdk:release
  {:doc "Build release version of the sdk for node"
   :task (shell "npx shadow-cljs release sdk")}

  build:sdk-web:develop
  {:doc "Build development version of the sdk using webpack"
   :task (shell "npx lerna run build:develop --scope @kubelt/sdk-web")}

  build:sdk-web:release
  {:doc "Build release version of the sdk using webpack"
   :task (shell "npx lerna run build:release --scope @kubelt/sdk-web")}

  ;; TODO: use varaibles for paths
  build:starbase:css
  {:doc "Generate CSS for the starbase"
   :task (shell "npx tailwindcss -i ./starbase/src/css/app.css -o ./starbase/resources/public/app.css --config starbase/tailwind.config.js")}

  build:starbase:develop
  {:doc "Build a development version of starbase"
   :task (shell "npx shadow-cljs compile starbase")}

  build:starbase:css-watch
  {:doc "Watch starbase CSS and rebuild when changed"
   :task (shell "npx tailwindcss -i ./starbase/src/css/app.css -o ./starbase/resources/public/app.css --config starbase/tailwind.config.js --watch")}

  build:starbase:develop-watch
  {:doc "Watch starbase sources and build development version when changed"
   :task (shell "npx shadow-cljs watch starbase starbase-test starbase-ci")}

  build:starbase:cypress-watch
  {:doc "Launch Cypress and run tests when changed"
   :task (shell {:dir "starbase/"} "npx cypress open")}

  -build:starbase:watch
  {:doc "Watch all starbase sources and rebuild development version when changed"
   :depends [build:starbase:css-watch build:starbase:develop-watch]}

  -build:starbase:watch-test
  {:doc "Watch all starbase sources/tests and rebuild development version when changed"
   :depends [build:starbase:css-watch build:starbase:develop-watch build:starbase:cypress-watch]}

  build:starbase:watch
  {:task (run '-build:starbase:watch {:parallel true})}

  build:starbase:watch-test
  {:task (run '-build:starbase:watch-test {:parallel true})}

  build:starbase:release-css
  {:doc "Build release version of starbase CSS"
   :task (shell "npx tailwindcss -i ./starbase/src/css/app.css -o ./starbase/resources/public/app.css --config starbase/tailwind.config.js")}

  build:starbase:release-cljs
  {:doc "Build release version of starbase"
   :task (shell "npx shadow-cljs release starbase")}

  -build:starbase:release
  {:doc "Build release version of starbase with CSS"
   :depends [build:starbase:release-css build:starbase:release-cljs]}

  build:starbase:release
  {:task (run '-build:starbase:release {:parallel true})}

  run:sdk-test:cljs:develop
  {:doc "Run development version of ClojureScript SDK tests"
   :task (shell "node target/sdk-test.js")}

  test:sdk:cljs:develop
  {:doc "Build and run development version of sdk tests"
   :depends [build:sdk-test:develop run:sdk-test:cljs:develop]}

  test:sdk:cljs:release
  {:doc "Build and run release version of sdk tests"
   :task (shell "npx shadow-cljs release sdk-test")}

  run:sdk-test:js:develop
  {:doc "Run JavaScript SDK tests"
   :task (shell {:dir "packages/sdk-js/__tests__"} "node api-v1.js")}

  test:sdk:js:develop
  {:doc "Build and run JavaScript tests against development SDK"
   :depends [build:sdk:develop run:sdk-test:js:develop]}

  test:sdk:js:release
  {:doc "Run JavaScript tests against release SDK"
   :depends [build:sdk:release]
   :task (shell {:dir "packages/sdk-js/__tests__"} "node api-v1.js")}

  test:sdk-web:develop
  {:doc ""
   :depends-on [build:sdk-web:develop]
   :task (shell "npx lerna run test --scope @kubelt/sdk-web")}

  test:sdk-web:release
  {:doc ""
   :depends-on [build:sdk-web:release]
   :task (shell "npx lerna run test --scope @kubelt/sdk-web")}

  test:web:develop
  {:doc ""
   :task (shell "npx shadow-cljs compile web-test")}

  ;; NB: we don't do a "release" build of :browser-test targets as that
  ;; optimizes away some of the test machinery.
  test:web:release
  {:doc ""
   :task (shell "npx shadow-cljs compile web-test")}

  test:web:ci:compile
  {:doc "Build web tests for headless execution using karma"
   :task (shell "npx shadow-cljs compile web-ci")}

  test:web:ci:run
  {:doc "Run web tests using headless chrome using karma"
   ;; (shell {:extra-env {"CHROME_BIN" "/snap/bin/chromium"}})
   :task (shell "npx karma start --single-run --no-fail-on-empty-test-suite")}

  test:web:ci
  {:doc "Run web tests using headless browser"
   ;; CHROME_BIN=$(which chromium) bb run test:web:ci
   :depends [test:web:ci:compile test:web:ci:run]}

  test:starbase-karma:ci:compile
  {:doc "Compile re-frame tests to be run with karma"
   :task (shell "npx shadow-cljs compile starbase-ci")}

  test:starbase-karma:ci:run
  {:doc "Run re-frame tests with karma"
   :task (shell {:dir "starbase/"} "npx karma start --single-run --reporters junit,dots")}

  test:starbase:ci:compile
  {:doc "Serve starbase server after files are compiled"
   :task (shell "npx shadow-cljs start starbase")}

  test:starbase:ci:run
  {:doc "Run starbase Cypress tests"
   ;; needs to have the starbase server running
   ;; can be run against `release` or `development` versions
   :task (shell {:dir "starbase/"} "npx cypress run")}

  -test:starbase:release
  {:depends [build:starbase:release
             ;; Compile and run Cypress tests
             test:starbase:ci:compile
             test:starbase:ci:run
             ;; Compile and run re-frame tests w/karma
             ;;test:starbase-karma:ci:compile
             ;;test:starbase-karma:ci:run
             ]}

  test:starbase:release
  {:task (run '-test:starbase:release)}

  test:all:develop
  {:doc "Build and test all develop"
   :depends [test:sdk:cljs:develop
             test:sdk:js:develop
             test:web:develop
             test:sdk-web:develop
             test:starbase:develop]}

  test:all:release
  {:doc "Build and test all release"
   :depends [test:sdk:cljs:release
             test:sdk:js:release
             test:web:release
             test:sdk-web:release
             test:starbase:release]}

  rpc:mock-server:ethereum
  {:doc "Run ethereum rpc mock server"
   :task (shell "npx open-rpc-mock-server -d ./fix/openrpc/ethereum.json -p 33337")}

  rpc:mock-server:oort
  {:doc "Run oort rpc mock server"
   :task (shell "npx open-rpc-mock-server -d ./fix/openrpc/oort.json -p 33337")}}}
