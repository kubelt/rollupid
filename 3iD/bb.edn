; kubelt/3iD/bb.edn
{:min-bb "0.8.0"
 :tasks
 {:requires
  [[babashka.classpath :as cp]
   [babashka.fs :as fs]
   [babashka.pods :as pods]
   [cheshire.core :as json]
   [clojure.edn :as edn]
   [clojure.java.io :as io]
   [clojure.pprint :as pprint]
   [clojure.set :as cs]
   [clojure.string :as cstr]
   [org.httpkit.client :as http]
   [selmer.parser :as tpl]]
  :init
  (do
    ;; Load pod for hickory, etc.
    (pods/load-pod 'retrogradeorbit/bootleg "0.1.9")

    ;; Add shared build code to classpath.
    (cp/add-classpath "../bb")

    (require '[pod.retrogradeorbit.hickory.select :as hick])

    (require '[com.kubelt.cloudflare.client :as cf])
    (require '[com.kubelt.cloudflare.client.zone :as cf.zone])
    (require '[com.kubelt.cloudflare.wrangler :as wrangler])
    (require '[com.kubelt.cloudflare.wrangler.asset :as wrangler.asset])
    (require '[com.kubelt.cloudflare.wrangler.kv :as wrangler.kv])
    (require '[com.kubelt.dot-env :as dot-env])
    (require '[com.kubelt.edn :as kb.edn])
    (require '[com.kubelt.git :as git])
    (require '[com.kubelt.github.secret :as github.secret])
    (require '[com.kubelt.system :as system])
    (require '[com.kubelt.util :as util])

    ;; The name of the application to build and deploy.
    (def app-id "three-id")
    ;; The KV namespace ("binding") where files are stored.
    (def kv-namespace "APP")

    ;; The public host name of the production deployment worker.
    (def current-host "dapp.threeid.xyz")
    ;; The public host name of the staging deployment worker.
    (def next-host "preview.threeid.xyz")

    ;; Developers
    ;; -------------------------------------------------------------------------

    ;; The name of the per-user development environments.
    (def env-cosmin "cosmin")
    (def env-juan "juan")
    (def env-alex "alex")
    (def env-robert "robert")
    ;; The name of the staging environment.
    (def env-next "next")
    ;; The name of the production environment.
    (def env-current "current")
    ;; All valid deployment environments.
    (def environments #{env-cosmin
                        env-juan
                        env-alex
                        env-robert
                        env-next
                        env-current})

    ;; UTILITIES
    ;; -------------------------------------------------------------------------

    (defn strip-scheme
      "Remove the HTTP scheme from a URL."
      [url]
      (let [http-scheme (re-pattern "^http.://")]
        (cstr/replace url http-scheme "")))

    ;; DIRECTORIES
    ;; -------------------------------------------------------------------------

    ;; Source code root.
    (def source-dir (str (fs/path "src")))
    ;; Root directory of the CloudFlare Worker for proxying web.
    (def worker-dir (str (fs/path "worker")))
    ;; Root path of the files to deploy to CloudFlare host.
    (def build-dir (str (fs/path "web-build")))

    ;; FILES
    ;; -------------------------------------------------------------------------

    ;; Compile-time constants for app.
    (def dot-env (str (fs/path ".env")))
    ;; Template for .env file containing compile-time constants.
    (def dot-env-example (str (fs/path ".env.example")))
    ;; Deployment-related configuration.
    (def deploy-edn (str (fs/path "." "deploy.edn")))
    ;; CloudFlare wrangler config file for the web-serving worker.
    (def wrangler-toml (str (fs/path worker-dir "wrangler.toml")))
    ;; Example wrangler config file we use as template.
    (def wrangler-example (str (fs/path worker-dir "wrangler.toml.example")))
    ;; Worker asset manifest used to list files in KV store.
    (def worker-manifest (str (fs/path worker-dir "src" "asset-manifest.json")))

    ;; GITHUB
    ;; -----------------------------------------------------------------------------

    ;; The environment variable GITHUB_ACTIONS is set to "true" in the
    ;; GitHub Actions execution context.
    (def github-actions? (= "true" (system/env "GITHUB_ACTIONS" "false")))

    ;; INIT
    ;; -------------------------------------------------------------------------

    ;; Set the location where template engine looks for templates.
    (tpl/set-resource-path! (str (fs/canonicalize ".")))
    ;; Disable caching of rendered templates.
    (tpl/cache-off!))

  ;; TODO add a --verbose flag that, when provided, signals us to print
  ;; extra output e.g. when entering and leaving a task.

  :enter (when github-actions?
           (println "entering:" (:name (current-task))))

  :leave (when github-actions?
           (println "leaving:" (:name (current-task))))

  ;; Data
  ;; ---------------------------------------------------------------------------
  ;; NB: can also supply a namespace ID rather than environment and binding:
  ;; - :namespace/id "1bca95d621054bffb7b943c899586552"

  ;; A collection of all application files rooted at build-dir. Data is
  ;; in the format expected by wrangler.
  -app:files (wrangler/files build-dir)

  ;;
  ;; Files
  ;;

  -file:robots (fs/path build-dir "robots.txt")

  ;;
  ;; CLI options
  ;;

  ;; For an example CLI configuration cf.
  ;; https://github.com/clojure/tools.cli#example-usage
  -cli:config
  (do [;; --deploy-env
       [nil "--deploy-env ENV" "Deployment environment"
        :validate [(fn [env] (contains? environments env))]]
       ;; --app-version
       [nil "--app-version VERSION" "Application version"]
       ;; --[no]-test-strict
       [nil "--[no-]test-strict" "Treat errors as exceptions"]
       ;; --verbose
       ["-v" "--verbose" "Verbosity level"
        :id :verbosity
        :default 0
        :update-fn inc]])

  -cli:options
  {:doc "Parse the CLI options"
   :requires [[clojure.tools.cli :as cli]]
   :depends [-cli:config]
   :task (let [opts (cli/parse-opts *command-line-args* -cli:config)]
           (if-let [errors (:errors opts)]
             (let [error-msg (cstr/join \newline errors)]
               (throw (ex-info error-msg {:errors errors})))
             opts))}

  ;;
  ;; deployment environment
  ;;

  ;; The target deployment environment. Looks for this value in order:
  ;; - the CLI option --deploy-env
  ;; - the environment variable DEPLOY_ENV
  ;; Throws if the given environment isn't one that is supported.
  -deploy:env
  {:doc "Extract deployment environment from DEPLOY_ENV and --deploy-env"
   :depends [-cli:options]
   :task (let [env-deploy (system/env "DEPLOY_ENV")
               opt-deploy (get-in -cli:options [:options :deploy-env])
               deploy-env (or opt-deploy env-deploy)]
           (if (contains? environments deploy-env)
             deploy-env
             (throw (ex-info "unknown deployment environment; try using --deploy-env or DEPLOY_ENV"
                             {:env/provided deploy-env
                              :env/allowed environments}))))}

  -deploy:scheme "https"

  -deploy:host
  {:doc "The public-facing host name for a given deployment environment"
   :depends [-deploy:env -url:alex -url:cosmin -url:juan -url:robert]
   :task (condp = -deploy:env
           env-next next-host
           env-current current-host
           ;; Developer-specific
           env-alex (strip-scheme -url:alex)
           env-cosmin (strip-scheme -url:cosmin)
           env-juan (strip-scheme -url:juan)
           env-robert (strip-scheme -url:robert)
           (throw (ex-info "no environment to URL mapping" {:env -deploy:env})))}

  -internal:host
  {:doc "The internal-facing host name for a given deployment environment"
   :depends [-url:deploy]
   :task (strip-scheme -url:deploy)}

  ;; Note: Run -prn:deploy-files to view this value. These files are
  ;; used to purge cache for a specific environment.
  -deploy:files
  {:doc "A deployment environment-specific list of deployed URLs"
   :depends [-deploy:scheme -deploy:host -app:files -wrangler:manifest]
   :task (let [files (vals -wrangler:manifest)]
           (mapv (fn [path]
                   (str -deploy:scheme "://" -deploy:host path))
                 files))}

  ;; For each file under public-dir, the manifest has an entry:
  ;; {"some/path": "/some/path"}
  -wrangler:manifest
  {:doc "A Cloudflare wrangler-format file manifest for the application"
   :depends [-app:files]
   :task (wrangler.asset/manifest -app:files)}

  ;;
  ;; verbosity
  ;;

  -verbose:level
  {:doc "Degree of verbosity requested by the user"
   :depends [-cli:options]
   :task (get-in -cli:options [:options :verbosity])}

  ;;
  ;; strict tests
  ;;

  -test:strict?
  {:doc "Extract strict testing flag from TEST_STRICT and --test-strict"
   :depends [-cli:options]
   :task (let [;; NB: everything except false and nil is true in
               ;; boolean context.
               env-strict (= "true" (system/env "TEST_STRICT" "true"))
               opt-strict (get-in -cli:options [:options :test-strict])]
           (if (some? opt-strict)
             opt-strict
             env-strict))}

  ;;
  ;; .env file
  ;;

  -env:file
  {:doc "Extract values from a .env configuration file"
   :task (dot-env/parse dot-env-example)}

  ;;
  ;; application version
  ;;

  ;; NB: We can also extract version from package.json:
  ;; (def version (cli/release-version "package.json" *command-line-args*))

  -git:head
  {:doc "Print the git HEAD commit"
   :task (git/commit)}

  ;; The application version. Looks for this value in order:
  ;; - the CLI option --app-version
  ;; - the environment variable APP_VERSION
  ;; - the first part of the HEAD git commit
  -app:version
  {:depends [-git:head -cli:options]
   :task (let [env-version (system/env "APP_VERSION")
               opt-version (get-in -cli:options [:options :app-version])
               git-version (subs -git:head 0 10)
               app-version (or opt-version env-version git-version)]
           ;; TODO can we validate the version string?
           app-version)}

  ;;
  ;; urls
  ;;

  ;; Development
  -url:cosmin
  {:depends [-env:merged]
   :task (get -env:merged :cosmin/url)}

  -url:juan
  {:depends [-env:merged]
   :task (get -env:merged :juan/url)}

  -url:alex
  {:depends [-env:merged]
   :task (get -env:merged :alex/url)}

  -url:robert
  {:depends [-env:merged]
   :task (get -env:merged :robert/url)}

  ;; Pre-production
  -url:next
  {:depends [-env:merged]
   :task (get -env:merged :next/url)}

  ;; Production
  -url:current
  {:depends [-env:merged]
   :task (get -env:merged :current/url)}

  -url:deploy
  {:doc "The internal URL of the deployed application"
   :depends [-deploy:env
             -url:cosmin
             -url:juan
             -url:alex
             -url:robert
             -url:next
             -url:current]
   :task (let [env->url {env-cosmin -url:cosmin
                         env-juan -url:juan
                         env-alex -url:alex
                         env-robert -url:robert
                         env-next -url:next
                         env-current -url:current}
               url (get env->url -deploy:env)]
           (if (some? url)
             url
             (throw (ex-info "missing environment to URL mapping"
                             {:deploy/env -deploy:env}))))}

  ;;
  ;; cloudflare
  ;;

  -cf:api-token
  {:doc "Cloudflare API token"
   :depends [-env:merged]
   :task (:cloudflare/api-token -env:merged)}

  -cf:zone-id
  {:doc "Cloudflare zone identifier for site"
   :depends [-env:merged]
   :task (:cloudflare/zone-id -env:merged)}

  -cf:zone-name
  {:doc "Cloudflare zone name for site"
   :depends [-env:merged]
   :task (:cloudflare/zone-name -env:merged)}

  -cf:client
  {:doc "A Cloudflare API client"
   :depends [-cf:api-token]
   :task (cf/init -cf:api-token)}

  -cf:kv:key:list
  {:doc "List the keys in a Cloudflare KV store"
   :depends [-options:cloudflare]
   :task (wrangler.kv/key-list -options:cloudflare)}

  ;;
  ;; options
  ;;

  ;; Configuration common across all environments.
  -options:common (do {:app/name app-id
                       :config/path wrangler-toml
                       :namespace/name kv-namespace})

  -options:cosmin
  {:doc "The options map for 'cosmin' development environment."
   :depends [-options:common]
   :task (do (merge -options:common {:env/name env-cosmin}))}

  -options:alex
  {:doc "The options map for 'alex' development environment."
   :depends [-options:common]
   :task (do (merge -options:common {:env/name env-alex}))}

  -options:robert
  {:doc "The options map for 'robert' development environment."
   :depends [-options:common]
   :task (do (merge -options:common {:env/name env-robert}))}

  -options:next
  {:doc "The options map for next environment"
   :depends [-options:common]
   :task (do (merge -options:common {:env/name env-next}))}

  -options:current
  {:doc "The options map for current environment"
   :depends [-options:common]
   :task (do (merge -options:common {:env/name env-current}))}

  -options:cloudflare
  {:doc "The options map used for CloudFlare operations"
   :depends [-deploy:env
             -options:alex
             -options:cosmin
             -options:robert
             -options:next
             -options:current]
   :task (condp = -deploy:env
           env-alex -options:alex
           env-cosmin -options:cosmin
           env-robert -options:robert
           env-next -options:next
           env-current -options:current
           (throw (ex-info "no options map for unknown build"
                           {:deploy/env -deploy:env})))}

  ;; application config
  ;; -----------------------------------------------------------------------------
  ;; Compile-time constants built into the application.

  -app:common
  (do
    {:oort-port 443
     :oort-schema "https"})

  -app:development
  (do
    {:oort-host "oort-devnet.kubelt.com"})

  -app:next
  (do
    {:oort-host "oort-testnet.kubelt.com"})

  -app:current
  (do
    {:oort-host "oort-mainnet.kubelt.com"})

  -app:config
  {:doc "Compile-time configuration for application build"
   :depends [-deploy:env -app:common -app:development -app:next -app:current]
   :task (condp = -deploy:env
           env-next (merge -app:common -app:next)
           env-current (merge -app:common -app:current)
           (merge -app:common -app:development))}

  ;; datadog
  ;; -----------------------------------------------------------------------------

  ;; A unique per-environment name used to bucket metrics in Datadog.
  -datadog:env
  {:doc "Generate the DATADOG_ENV environment variable value"
   :depends [-deploy:env]
   :task (condp = -deploy:env
           env-next -deploy:env
           env-current -deploy:env
           (cstr/join ":" ["dev" -deploy:env]))}

  ;; Taken from deploy.edn, overridden by presence of DATADOG_CLIENT_TOKEN
  ;; environment variable.
  -datadog:client-token
  {:doc "The Datadog client-side token"
   :depends [-env:merged]
   :task (get -env:merged :datadog/client-token)}

  ;; These values will be injected into the .env file for use as
  ;; compile-time constants.
  -datadog:config
  {:doc "Return a map of Datadog configuration values"
   :depends [-datadog:env -datadog:client-token]
   :task {:datadog-env -datadog:env
          :datadog-client-token -datadog:client-token}}

  ;; version
  ;; -----------------------------------------------------------------------------

  -version:config
  {:doc "Return a map of application version information"
   :depends [-app:version -git:head]
   :task {:git-commit -git:head
          :app-version -app:version}}

  ;; secrets
  ;; -----------------------------------------------------------------------------

  -env:admin-account-id (system/env "ADMIN_ACCOUNT_ID")
  -env:next-kv-app-id (system/env "NEXT_KV_APP_ID")
  -env:next-url (system/env "NEXT_URL")
  -env:current-kv-app-id (system/env "CURRENT_KV_APP_ID")
  -env:current-url (system/env "CURRENT_URL")

  -env:alex-account-id (system/env "ALEX_ACCOUNT_ID")
  -env:alex-kv-app-id (system/env "ALEX_KV_APP_ID")
  -env:cosmin-account-id (system/env "COSMIN_ACCOUNT_ID")
  -env:cosmin-kv-app-id (system/env "COSMIN_KV_APP_ID")
  -env:juan-account-id (system/env "JUAN_ACCOUNT_ID")
  -env:juan-kv-app-id (system/env "JUAN_KV_APP_ID")
  -env:robert-account-id (system/env "ROBERT_ACCOUNT_ID")
  -env:robert-kv-app-id (system/env "ROBERT_KV_APP_ID")

  -env:cloudflare-api-token (system/env "CLOUDFLARE_API_TOKEN")
  -env:cloudflare-zone-id (system/env "CLOUDFLARE_ZONE_ID")
  -env:datadog-client-token (system/env "DATADOG_CLIENT_TOKEN")

  ;; environment
  ;; -----------------------------------------------------------------------------

  -env:variables
  {:doc "A map of values read from environment variables"
   :depends [-env:admin-account-id
             -env:robert-account-id
             -env:robert-kv-app-id
             -env:juan-account-id
             -env:juan-kv-app-id
             -env:cosmin-account-id
             -env:cosmin-kv-app-id
             -env:alex-account-id
             -env:alex-kv-app-id
             -env:next-kv-app-id
             -env:next-url
             -env:current-kv-app-id
             -env:current-url
             -env:cloudflare-api-token
             -env:cloudflare-zone-id
             -env:datadog-client-token]
   :task (do
           {:robert/account-id -env:robert-account-id
            :robert/kv-app-id -env:robert-kv-app-id
            :juan/account-id -env:juan-account-id
            :juan/kv-app-id -env:juan-kv-app-id
            :cosmin/account-id -env:cosmin-account-id
            :cosmin/kv-app-id -env:cosmin-kv-app-id
            :alex/account-id -env:alex-account-id
            :alex/kv-app-id -env:alex-kv-app-id
            :admin/account-id -env:admin-account-id
            :next/kv-app-id -env:next-kv-app-id
            :next/url -env:next-url
            :current/kv-app-id -env:current-kv-app-id
            :current/url -env:current-url
            :cloudflare/api-token -env:cloudflare-api-token
            :cloudflare/zone-id -env:cloudflare-zone-id
            :datadog/client-token -env:datadog-client-token})}

  -deploy:edn
  {:doc "A map of values read from deployment configuration file"
   :task (if (fs/regular-file? deploy-edn)
           (kb.edn/read deploy-edn)
           {})}

  -env:merged
  {:doc "Merged deployment configuration"
   :depends [-deploy:edn -env:variables]
   :task (let [;; Use the value supplied by environment variable, if
               ;; available. Otherwise default to using the value in the
               ;; deployment configuration file.
               env-or-config (fn [a b] (or a b))]
           (merge-with env-or-config -env:variables -deploy:edn))}

  ;; preflight
  ;; ---------------------------------------------------------------------------
  ;; These tasks inspect the local environment to make sure everything
  ;; looks as it should before building and/or deploying the
  ;; application.

  check:repo-clean
  {:doc "Ensure that the repo working tree is clean"
   :task (when (git/dirty?)
           (let [message "dirty repo"
                 status (git/status)]
             (throw (ex-info message {:status status}))))}

  check:wrangler-toml
  {:doc "Ensure that wrangler.toml configuration file exists"
   :task (when-not (fs/regular-file? wrangler-toml)
           (let [message (str "missing " wrangler-toml)]
             (throw (ex-info message {:file wrangler-toml}))))}

  check:wrangler
  {:doc "Ensure that wrangler is available"
   :task (let [wrangler-path (util/which "wrangler")]
           (when-not (fs/regular-file? wrangler-path)
             (throw (ex-info "missing wrangler" {:file wrangler-path}))))}

  check:deploy-edn
  {:doc "Ensure that deployment configuration exists"
   :task (when-not (fs/regular-file? deploy-edn)
           (let [message (str "missing " deploy-edn)]
             (throw (ex-info message {:file deploy-edn}))))}

  check:all
  {:doc "Run all available preflight checks"
   :depends [check:repo-clean
             check:deploy-edn
             check:wrangler
             check:wrangler-toml]}

  ;; informational
  ;; ---------------------------------------------------------------------------
  ;; Tasks to describe the environment and available configuration options.

  available:env
  {:doc "List the available deployment environments"
   :task (doseq [env environments]
           (println "->" env))}

  deploy:env
  {:doc "Print the configured deployment environment"
   :depends [-deploy:env]
   :task (println -deploy:env)}

  app:version
  {:doc "Print the configured application version"
   :depends [-app:version]
   :task (println -app:version)}

  git:commit
  {:doc "Print the git HEAD commit"
   :depends [-git:head]
   :task (println -git:head)}

  ;; github
  ;; -----------------------------------------------------------------------------

  -gh:secret:cloudflare-api-token
  {:depends [-env:merged]
   :task (let [secret (:cloudflare/api-token -env:merged)]
           (github.secret/set "CLOUDFLARE_API_TOKEN" secret))}

  -gh:secret:cloudflare-zone-id
  {:depends [-env:merged]
   :task (let [secret (:cloudflare/zone-id -env:merged)]
           (github.secret/set "CLOUDFLARE_ZONE_ID" secret))}

  -gh:secret:datadog-client-token
  {:depends [-env:merged]
   :task (let [secret (:datadog/client-token -env:merged)]
           (github.secret/set "DATADOG_CLIENT_TOKEN" secret))}

  -gh:secret:admin-account-id
  {:depends [-env:merged]
   :task (let [secret (:admin/account-id -env:merged)]
           (github.secret/set "ADMIN_ACCOUNT_ID" secret))}

  -gh:secret:next-kv-app-id
  {:depends [-env:merged]
   :task (let [secret (:next/kv-app-id -env:merged)]
           (github.secret/set "NEXT_KV_APP_ID" secret))}

  -gh:secret:next-url
  {:depends [-env:merged]
   :task (let [secret (:next/url -env:merged)]
           (github.secret/set "NEXT_URL" secret))}

  -gh:secret:current-kv-app-id
  {:depends [-env:merged]
   :task (let [secret (:current/kv-app-id -env:merged)]
           (github.secret/set "CURRENT_KV_APP_ID" secret))}

  -gh:secret:current-url
  {:depends [-env:merged]
   :task (let [secret (:current/url -env:merged)]
           (github.secret/set "CURRENT_URL" secret))}

  -gh:secret:metamask-password
  {:depends [-env:merged]
   :task (let [secret (:metamask/password -env:merged)]
           (github.secret/set "METAMASK_3ID_TESTING_PASSWORD" secret))}

  -gh:secret:metamask-recovery-phrase
  {:depends [-env:merged]
   :task (let [secret (:metamask/recovery-phrase -env:merged)]
           (github.secret/set "METAMASK_3ID_TESTING_RECOVERY_PHRASE" secret))}

  gh:secret:init
  {:doc "Set up secrets in GitHub Actions"
   :depends [-gh:secret:cloudflare-api-token
             -gh:secret:cloudflare-zone-id
             -gh:secret:datadog-client-token
             -gh:secret:admin-account-id
             -gh:secret:next-kv-app-id
             -gh:secret:next-url
             -gh:secret:current-kv-app-id
             -gh:secret:current-url
             -gh:secret:metamask-password
             -gh:secret:metamask-recovery-phrase]}

  ;; compile
  ;; ---------------------------------------------------------------------------
  ;; Compile (and clean up) the various artifacts that make up the
  ;; application.

  ;; wrangler.toml - construct a wrangler.toml

  wrangler:toml
  {:doc "Generate a wrangler.toml from example file"
   :depends [-env:merged]
   :task (let [output (tpl/render-file wrangler-example -env:merged)]
           (spit wrangler-toml output))}

  ;; .env - inject values into the .env file

  dot:env
  {:doc "Inject values into the .env file"
   :depends [-env:file -version:config -datadog:config -app:config]
   :task (let [new-env (merge -env:file -app:config -datadog:config -version:config)]
           ;; Write updated .env file.
           (dot-env/write dot-env new-env :output/sort? true))}

  ;; robots.txt - directives for web crawlers

  compile:robots
  {:doc "Generate a robots.txt configuration file"
   :depends [-deploy:env -file:robots]
   :task (let [;; Block nothing in production, block everything in other
               ;; environments.
               all-paths "*"
               no-paths ""
               ;; TODO Until launch day our robots.txt blocks everything.
               disallow (if (= "current" -deploy:env) all-paths all-paths)
               all-agents "*"
               lines [["User-agent" all-agents]
                      ["Disallow" disallow]]
               content (cstr/join \newline (map (fn [pair] (cstr/join ": " pair)) lines))
               out-file (str -file:robots)]
           (with-open [writer (io/writer out-file)]
             (spit writer content))
           ;; Return the path of the generated file.
           out-file)}

  clean:robots
  {:doc "Remove the generated robots.txt file"
   :depends [-file:robots]
   :task (fs/delete-if-exists -file:robots)}

  ;; application - the compiled JavaScript application

  compile:app
  {:doc "Build release version of the application"
   :depends [dot:env]
   :task (let [command (cstr/join " " ["npx" "expo" "build:web" "."])]
           (shell command))}

  clean:app
  {:doc "Remove compiled application resources"
   :task (fs/delete-tree build-dir)}

  ;; release - compile the full application for release

  build:release
  {:doc "Build all application assets for production"
   :depends [compile:app compile:robots]}

  clean:release
  {:doc "Remove all generated application assets"
   :depends [clean:app]}

  ;; manifest - the mapping from path to KV store key used by CloudFlare
  ;; worker when serving the site

  asset:manifest
  {:doc "Generate an asset manifest for CloudFlare worker"
   :depends [-app:files -wrangler:manifest]
   :task (let [out-path worker-manifest]
           (json/generate-stream -wrangler:manifest (clojure.java.io/writer out-path))
           ;; Return the asset manifest content
           -wrangler:manifest)}

  install:worker
  {:doc "Install node deps for worker"
   :task (let [command (cstr/join " " ["npm" "install"])]
           (shell {:dir worker-dir} command))}

  publish:worker
  {:doc "Publish the CloudFlare worker"
   :depends [-deploy:env wrangler:toml asset:manifest install:worker]
   :task (let [command ["npx" "wrangler" "publish" "--env" -deploy:env]]
           (shell {:dir worker-dir} (cstr/join " " command))
           ;; Sleep for a bit to give the worker time to become
           ;; available, otherwise we can see a race condition.
           (Thread/sleep 5000))}

  publish:assets
  {:doc "Publish website assets to CloudFlare KV store"
   :depends [-app:files -options:cloudflare wrangler:toml]
   :task (do
           ;; Remove any values in the KV store.
           (wrangler.kv/truncate -options:cloudflare)
           ;; Push the application files en masse.
           (wrangler.kv/bulk-put -app:files -options:cloudflare))}

  cf:zone:purge-all
  {:doc "Purge the Cloudflare cache for staging and production zones"
   :depends [-deploy:env -cf:api-token -cf:zone-id -cf:zone-name]
   :task (when (contains? #{env-next env-current} -deploy:env)
           (let [client (cf/init -cf:api-token)
                 response (cf.zone/purge-cache client -cf:zone-id)
                 details (str " [env:" -deploy:env ", zone:" -cf:zone-name "])")
                 message (if (= 200 (get response :status))
                           (str "[🪹] Purge zone cache: SUCCESS " details)
                           (str "[❌] Purge zone cache: FAILED " details))]
             (println message)))}

  ;; NB: this is only supported for Cloudflare enterprise zones.
  cf:zone:purge-host
  {:doc "Purge Cloudflare cache for specific environment"
   :depends [-deploy:env -deploy:host -cf:client -cf:zone-id -cf:zone-name]
   :task (let [response (cf.zone/purge-other -cf:client -cf:zone-id :hosts [-deploy:host])
               details (str " [env:" -deploy:env ", host:" host "]")
               message (if (= 200 (get response :status))
                         (str "[🪹] Purge zone cache: SUCCESS " details)
                         (str "[❌] Purge zone cache: FAILED " details))]
           (println message))}

  cf:zone:purge-urls
  {:doc "Purge asset URLs from Cloudflare cache for specific environment"
   :depends [-deploy:env -cf:client -cf:zone-id -deploy:host -internal:host -cf:kv:key:list -verbose:level]
   :task (let [external-urls (map (fn [path] (str "https://" -deploy:host path)) -cf:kv:key:list)
               internal-urls (map (fn [path] (str "https://" -internal:host path)) -cf:kv:key:list)
               urls (concat internal-urls external-urls)]
           (doseq [;; The API allows purging only 30 URLs at once.
                   files (partition 30 urls)]
             (when (> -verbose:level 0)
               (doseq [file files]
                 (println (str "[🏹️] " file))))
             (let [response (cf.zone/purge-url -cf:client -cf:zone-id files)
                   details (str "[env:" -deploy:env "]")
                   message (if (= 200 (get response :status))
                             (str "[🪹] Purge zone cache: SUCCESS " details)
                             (str "[❌] Purge zone cache: FAILED " details))]
               (println message)))
           ;; Return the set of all URLs that were purged.
           urls)}

  publish:site
  {:doc "Publish assets and worker to CloudFlare"
   :depends [publish:assets publish:worker cf:zone:purge-urls]
   :task (let [delay-ms 5000]
           ;; It sometimes takes a moment before the worker is able to
           ;; forward requests; delay to give things a chance to fully
           ;; deploy.
           (Thread/sleep delay-ms))}

  deploy:app
  {:doc "Build and deploy the application"
   :depends [-deploy:env clean:release build:release publish:site]
   :task (let [message (str "[🌸] Deployment: SUCCESS [env:'" -deploy:env "']")]
           (println message))}

  ;; release
  ;; -----------------------------------------------------------------------------
  ;; We use a tag-based release flow. Pushing a tag triggers a build
  ;; and, assuming that all of the tests pass, runs deploy:app for
  ;; the "current" target environment.

  ;; GPG release signing key ID.
  -gpg:signing-key "8912BEE648BBC38CD729CB38CA8616DB61D5E946"

  -git:remote "origin"

  -git:branch
  {:doc "Current git branch"
   :depends []
   :task (git/branch)}

  -check:env-current
  {:doc "Ensure production deployment target when releasing"
   :depends [-deploy:env]
   :task (when (not= env-current -deploy:env)
           (let [message "production releases must target 'current' environment"
                 data {:deploy/env -deploy:env}]
             (throw (ex-info message data))))}

  -check:release-version
  {:doc "Validate that release versions have expected shape"
   :depends [-app:version]
   :task (let [version-re (re-pattern "\\d+")]
           (if-not (re-matches version-re -app:version)
             (let [message "app version should be a simple integer; try --app-version"
                   data {:app/version -app:version}]
               (throw (ex-info message data)))
             -app:version))}

  -check:release-branch
  {:doc "Check that release is from main branch"
   :depends [-git:branch]
   :task (when-not (= "main" -git:branch)
           (let [message "must release from main branch"
                 data {:git/branch -git:branch}]
             (throw (ex-info message data))))}

  ;; -u <keyid>; -u implies -s, which signs using committer identity
  ;; -m "message"
  -git:tag:create
  {:doc "Create a signed tag using release signing key"
   :depends [-gpg:signing-key -app:version]
   :task (let [tag-name (str "v" -app:version)
               message tag-name
               command ["git" "tag" tag-name "-u" -gpg:signing-key "-m" message]]
           (shell (cstr/join " " command))
           ;; Sets the tag-name as the value of -git:tag:create.
           tag-name)}

  -git:tag:push
  {:doc "Push a git tag to the remote"
   :depends [-git:remote -git:tag:create]
   :task (git/push -git:remote -git:tag:create)}

  release:app
  {:doc "Trigger a deployment to production"
   :depends [check:repo-clean
             -check:release-branch
             -check:release-version
             -check:env-current
             -git:tag:push]
   :task (let [detail (str "[env:'" -deploy:env "', tag:" -git:tag:create "]")
               message "[🪅] Release: RUNNING"]
           (println (cstr/join " " [message detail])))}

  ;; test

  -url:paths
  {:doc "A sequence of URL paths for all compiled output files"
   :depends [asset:manifest]
   :task (vals asset:manifest)}

  -urls:external
  {:depends [-deploy:host -url:paths]
   :task (map (partial str "https://" -deploy:host) -url:paths)}

  -urls:internal
  {:depends [-internal:host -url:paths]
   :task (map (partial str "https://" -internal:host) -url:paths)}

  ;; The asset manifest is mapping from KV store key to remote
  ;; path. This is a sequence of the paths of every file stored in the
  ;; KV store.
  ;;
  ;; NB: when testing *both* internal and external URLs, it seems as
  ;; though DDoS protection kicks in as you switch from one hostname to
  ;; the other.
  test:smoke:http
  {:doc "Perform HTTP request for every deployed asset"
   :depends [-urls:internal -urls:external -test:strict? -verbose:level]
   :task (let [;; Collect all the URLs to be tested.
               urls (concat -urls:external #_-urls:internal)
               ;; Construct a map from url to HTTP request promise. The
               ;; request isn't actually performed until the promise is
               ;; deref'ed.
               request-fn (fn [url]
                            (Thread/sleep 1000)
                            (let [result (deref (http/get url))
                                  status (:status result)]
                              (when (> -verbose:level 0)
                                (println (format  "-> [%s] %s" status url)))
                              [url status]))
               requests (into {} (map request-fn urls))]
           ;; If any of the requests had a non-OK status result, throw
           ;; an exception if --test-strict flag was set.
           (when -test:strict?
             (doseq [[url status] requests]
               (when (not= 200 status)
                 (let [message (str "error fetching " url)]
                   (throw (ex-info message {:url url :status status}))))))
           ;; Return the results for later inspection.
           requests)}

  test:smoke
  {:doc "Perform all smoke tests"
   :depends [test:smoke:http]
   :task (println "[🚬] Smoke tests: successful")}

  ;; Debugging
  ;; ---------------------------------------------------------------------------

  -prn:dot-env
  {:doc "Print the contents of .env file"
   :depends [-env:file]
   :task (pprint/pprint -env:file)}

  -prn:deploy-edn
  {:doc "Print the contents of deployment configuration"
   :depends [-deploy:edn]
   :task (pprint/pprint -deploy:edn)}

  -prn:env-vars
  {:doc "Print the environment variables we use"
   :depends [-env:variables]
   :task (pprint/pprint -env:variables)}

  -prn:env
  {:doc "Print the merged environment"
   :depends [-env:merged]
   :task (pprint/pprint -env:merged)}

  -prn:test-strict?
  {:doc "Print test-strict? setting"
   :depends [-test:strict?]
   :task (println -test:strict?)}

  -prn:deploy-env
  {:doc "Print the configured deployment environment"
   :depends [-deploy:env]
   :task (println -deploy:env)}

  -prn:url-deploy
  {:doc "Print the configured deployment URL"
   :depends [-url:deploy]
   :task (println -url:deploy)}

  -prn:url-paths
  {:doc "Print the set of URL paths for output files"
   :depends [-url:paths]
   :task (pprint/pprint -url:paths)}

  -prn:urls-external
  {:doc "Print the set of public-facing application URLs"
   :depends [-urls:external]
   :task (pprint/pprint -urls:external)}

  -prn:urls-internal
  {:doc "Print the set of internal-facing application URLs"
   :depends [-urls:internal]
   :task (pprint/pprint -urls:internal)}

  -prn:deploy-host
  {:doc "Print the configured deployment host"
   :depends [-deploy:host]
   :task (println -deploy:host)}

  -prn:deploy-files
  {:doc "Print the deployed file URLs for target environment"
   :depends [-deploy:files]
   :task (pprint/pprint -deploy:files)}

  -prn:app-version
  {:doc "Print the application version"
   :depends [-app:version]
   :task (println -app:version)}

  -prn:asset-manifest
  {:doc "Print asset manifest JSON"
   :depends [asset:manifest]
   :task (pprint/pprint asset:manifest)}

  -prn:datadog-config
  {:doc "Print the Datadog configuration that's injected into .env"
   :depends [-datadog:config]
   :task (pprint/pprint -datadog:config)}

  -prn:options
  {:doc "Print the options map for CloudFlare operations"
   :depends [-options:cloudflare]
   :task (pprint/pprint -options:cloudflare)}

  -prn:cli-options
  {:doc "Print the parsed command line arguments"
   :depends [-cli:options]
   :task (pprint/pprint -cli:options)}

  -prn:cli-args
  {:doc "Print the raw command line arguments"
   :task (pprint/pprint *command-line-args*)}

  -prn:task-name
  {:doc "Print the name of the executing task"
   :task (println (:name (current-task)))}

  -prn:smoke-http
  {:doc "Print the output of HTTP smoke test"
   :depends [test:smoke:http]
   :task (pprint/pprint test:smoke:http)}

  -prn:git-branch
  {:doc "Print the current git branch"
   :depends [-git:branch]
   :task (println -git:branch)}

  -prn:git-status
  {:doc "Print the git status of working tree"
   :task (pprint/pprint (git/status))}

  -prn:git-dirty?
  {:doc "Print out git working tree dirty status"
   :task (prn (git/dirty?))}

  -prn:kv-key-list
  {:doc "List the keys in a Cloudflare KV store"
   :depends [-cf:kv:key:list]
   :task (pprint/pprint (wrangler.kv/key-list -options:cloudflare))}

  -kv:bulk:delete
  {:doc "Remove all entries from a Cloudflare KV store"
   :depends [-options:cloudflare]
   :task (let [items #{"foo"}]
           (println (wrangler.kv/bulk-delete items -options:cloudflare)))}

  -kv:bulk:put
  {:doc "Write app files to a Cloudflare KV store"
   :depends [-app:files -options:cloudflare]
   :task (println (wrangler.kv/bulk-put -app:files -options:cloudflare))}

  -kv:truncate
  {:doc "Remove all keys from a Cloudflare KV store"
   :depends [-options:cloudflare]
   :task (println (wrangler.kv/truncate -options:cloudflare))}}}
